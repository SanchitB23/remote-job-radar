datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL") // point to the same DB as aggregator
}

generator client {
  provider = "prisma-client-js"
}

model job {
  id             String                 @id
  source         String
  title          String
  company        String
  description    String                 @db.Text
  location       String?
  work_type      String?
  salary_min     Int?
  salary_max     Int?
  url            String
  published_at   DateTime
  vector         Unsupported("vector")?
  fit_score      Float?
  bookmarks      bookmark[]
  pipeline_items PipelineItem[]

  @@map("jobs")
}

model bookmark {
  id                  String        @id @default(uuid())
  job_id              String
  user_id             String

  job                 job           @relation(fields: [job_id], references: [id])
  user                user_profile? @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, job_id])
  @@index([user_id])
  @@map("bookmarks")
}

model PipelineItem {
  id         String   @id @default(uuid())
  user_id    String
  job_id     String
  column     String // "wishlist" | "applied" | "interview" | "offer"
  position   Int // ordering within column
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  job                 job           @relation(fields: [job_id], references: [id])
  user                user_profile? @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, job_id])
  @@index([user_id, column, position])
  @@map("pipeline_items")
}

model user_profile {
  user_id      String                 @id
  skills       String[]               @default([])
  skill_vector Unsupported("vector")?
  updated_at   DateTime               @updatedAt

  // optional back-relations (handy in Prisma)
  bookmarks      bookmark[]
  pipeline_items PipelineItem[]

  @@map("user_profiles")
}
