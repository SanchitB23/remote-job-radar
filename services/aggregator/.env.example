# =========================================
# Remote Job Radar Aggregator - Environment Configuration
# =========================================
# Go service for fetching jobs, generating embeddings, and calculating fit scores
# 
# Copy this file to .env.local (for development) and fill in your values.

# =========================================
# Environment
# =========================================
ENV=local
GO_ENV=development
GIN_MODE=debug

# =========================================
# Database Configuration (Required)
# =========================================
# PostgreSQL with pgvector extension - direct connection (not via Prisma)
# Format: host=hostname user=username password=password dbname=database sslmode=disable

# Development (using docker-compose):
DB_DSN=host=localhost user=postgres password=local dbname=postgres sslmode=disable

# Production (example):
# DB_DSN=host=your-db-host user=your-db-user password=your-db-password dbname=your-db-name sslmode=require

# =========================================
# ML Embedder Service (Required)
# =========================================
# URL to the Python FastAPI embedder service
# This service generates vector embeddings for job descriptions and skills

# Development (using docker-compose):
EMBEDDER_URL=http://localhost:8000

# Production (example):
# EMBEDDER_URL=https://embedder.yourdomain.com

# Alternative port if running embedder on different port:
# EMBEDDER_URL=http://localhost:1234

# Embedder service configuration (optional - defaults provided)
# Maximum text length to send to embedder (in characters)
EMBEDDER_MAX_TEXT_LENGTH=10000

# Timeout for embedder HTTP requests
EMBEDDER_TIMEOUT=5m

# Maximum number of retries for failed embedding requests
EMBEDDER_MAX_RETRIES=10

# Base delay for exponential backoff retry logic
EMBEDDER_BASE_DELAY=1m

# Maximum delay between retries
EMBEDDER_MAX_DELAY=2m

# =========================================
# Skills Configuration (Required)
# =========================================
# Path to the YAML file containing your skills for job matching
# The aggregator will generate embeddings from these skills to calculate fit scores

SKILLS_FILE=skills.yml

# Example skills.yml content:
# skills:
#   - react
#   - typescript
#   - golang
#   - python
#   - kubernetes
#   - aws

# =========================================
# Server Configuration (Optional)
# =========================================
# Port for the HTTP server (default: 8080)
PORT=8080

# =========================================
# Job Scheduling Configuration (Optional)
# =========================================
# How often to fetch new jobs from external APIs
# Accepts Go duration format: 1h, 30m, 2h30m, etc.
FETCH_INTERVAL=2h

# How often to score new jobs that don't have fit scores yet
SCORE_INTERVAL=4h

# Timeout for individual fetch operations
FETCH_TIMEOUT=5m

# Maximum number of pages to fetch from job sources
FETCHER_MAX_PAGE_NUM=10

# =========================================
# Job Source APIs
# =========================================
# Remotive API - no authentication required (included by default)

# Adzuna API (optional) - register at https://developer.adzuna.com
# If both ADZUNA_APP_ID and ADZUNA_APP_KEY are provided, Adzuna will be enabled
# ADZUNA_APP_ID=your_adzuna_app_id
# ADZUNA_APP_KEY=your_adzuna_app_key

# Note: When Adzuna is enabled, the service will fetch up to 150 jobs (3 pages of 50)
# from Adzuna in addition to jobs from Remotive

# =========================================
# Logging Configuration (Optional)
# =========================================
# Log level: debug, info, warn, error
LOG_LEVEL=info

# Enable structured JSON logging in production
# LOG_FORMAT=json
